import CommandDef from 'terminal/commanddef';
import CommandArg from 'terminal/commandarg';

export default function get_command_table(term) {
    console.log('get_command_table receives', term);
    return [
        new CommandDef('help', 'show this information',
            [new CommandArg('command', term.parseString, 'command name', 'optional')], term.help),
        new CommandDef('exit', 'exit command line interpreter', [], term.exit),
        new CommandDef('cd', 'change current directory',
            [new CommandArg('dir', term.parseString, 'directory', 'file', 'container', 'optional')], term.chdir),
        new CommandDef('pushd', 'push new current directory',
            [new CommandArg('dir', term.parseString, 'directory', 'file', 'container')], term.pushd),
        new CommandDef('popd', 'pop current directory stack', [], term.popd),
        new CommandDef('pwd', 'print current working directory', [], term.pwd),
        new CommandDef('create', 'create a new group (deprecated, use mkgroup)',
            [new CommandArg('group', term.parseString, 'new group path', 'file'),
                new CommandArg('description', term.parseString)],
            term.create),
        new CommandDef('mkgroup', 'create a new group',
            [new CommandArg('group', term.parseString, 'new group path', 'file'),
                new CommandArg('description', term.parseString)],
            term.create),
        new CommandDef('groups', 'list the immediate subgroups of a group',
            [new CommandArg('group', term.parseString, 'group path', 'file')], term.groups),
        new CommandDef('groups!', 'list all descendant groups of a group',
            [new CommandArg('group', term.parseString, 'group path', 'file')], term.allGroups),
        new CommandDef('users', 'list the users in a group',
            [new CommandArg('group', term.parseString, 'group path', 'file')], term.users),
        new CommandDef('users!', 'list the users in a group and all its descendants',
            [new CommandArg('group', term.parseString, 'group path', 'file')], term.allUsers),
        new CommandDef('adduser', 'add users to a group',
            [new CommandArg('group', term.parseString, 'group path', 'file'),
                new CommandArg('users', term.parseString, 'user list', 'list')], term.adduser),
        new CommandDef('rmuser', 'remove users from a group',
            [new CommandArg('group', term.parseString, 'group path', 'file'),
                new CommandArg('users', term.parseString, 'user list', 'list')], term.remuser),
        new CommandDef('mkuser', 'create a user',
            [new CommandArg('username', term.parseString),
                new CommandArg('password', term.parseString),
                new CommandArg('group', term.parseString, 'group path', 'file'),
                new CommandArg('email', term.parseString, null, 'optional'),
                new CommandArg('regcode', term.parseString, 'registration code', 'optional')], term.mkuser),
        new CommandDef('ucopy', 'copy users between groups',
            [new CommandArg('dstgroup', term.parseString, 'group path', 'file'),
                new CommandArg('srcgroup', term.parseString, 'group path', 'file'),
                new CommandArg('users', term.parseString, 'user list', 'list'),
                new CommandArg('rename', term.parsePair, 'rename pairs list', 'list')], term.ucopy),
        new CommandDef('gmove', 'move a group to a new parent',
            [new CommandArg('dstpath', term.parseString, 'parent path', 'file'),
                new CommandArg('srcgroup', term.parseString, 'group path', 'file')], term.gmove),
        new CommandDef('gattr', 'enable/disable login/signup',
            [new CommandArg('group', term.parseString, 'group path', 'file'),
                new CommandArg('login', term.parseBoolean, null, 'optional'),
                new CommandArg('signup', term.parseBoolean, null, 'optional'),
                new CommandArg('captcha', term.parseBoolean, null, 'optional'),
                new CommandArg('guest', term.parseString, 'guest page', 'optional'),
                new CommandArg('home', term.parseString, 'home page', 'optional'),
                new CommandArg('desc', term.parseString, 'description', 'optional'),
                new CommandArg('googleLoginEnabled', term.parseBoolean, 'enable Google login', 'optional'),
                new CommandArg('googleSignupEnabled', term.parseBoolean, 'enable Google signup', 'optional'),
                new CommandArg('verifyEmailEnabled', term.parseBoolean, 'verify email', 'optional'),
                new CommandArg('regKey', term.parseString, 'self-registration key', 'optional')],
            term.gattr),
        new CommandDef('rmgroup', 'remove an empty group that has no subgroups',
            [new CommandArg('group', term.parseString, 'group path', 'file')], term.remgroup),
        new CommandDef('rmgroup!', 'remove a group and its descendants',
            [new CommandArg('group', term.parseString, 'group path', 'file')], term.remAllGroup),
        new CommandDef('ls', 'list files',
            [new CommandArg('path', term.parseString, 'file path', 'file', 'optional'),
                new CommandArg('folder', term.parseLiteral, null, 'optional')], term.ls),
        new CommandDef('mkdir', 'create a folder',
            [new CommandArg('path', term.parseString, 'folder path', 'file'),
                new CommandArg('recursive', term.parseLiteral, null, 'optional')], term.mkdir),
        new CommandDef('lookup', 'show file details',
            [new CommandArg('path', term.parseString, 'file path', 'file')], term.lookup),
        new CommandDef('link', 'create link to existing file',
            [new CommandArg('srcpath', term.parseString, 'source file', 'file'),
                new CommandArg('dstpath', term.parseString, 'target', 'file')], term.link),
        new CommandDef('mv', 'rename a file',
            [new CommandArg('srcpath', term.parseString, 'current path', 'file'),
                new CommandArg('dstpath', term.parseString, 'new path', 'file')], term.mv),
        new CommandDef('rm', 'remove a file and optionally its descendants',
            [new CommandArg('path', term.parseString, 'file path', 'file'),
                new CommandArg('recursive', term.parseLiteral, 'recursive?', 'optional')], term.rm),
        new CommandDef('mkpolicy', 'create an access policy',
            [new CommandArg('path', term.parseString, 'policy path', 'file'),
                new CommandArg('desc', term.parseString, 'description', 'optional')], term.mkpolicy),
        new CommandDef('addrole', 'add a principal role assignment to a policy',
            [new CommandArg('path', term.parseString, 'policy path', 'file'),
                new CommandArg('principal', term.parseString),
                new CommandArg('role', term.parseString)], term.addrole),
        new CommandDef('rmrole', 'remove a principal role assignment from a policy',
            [new CommandArg('path', term.parseString, 'policy path', 'file'),
                new CommandArg('principal', term.parseString),
                new CommandArg('role', term.parseString)], term.rmrole),
        new CommandDef('lspolicy', 'list the role assignments of a policy',
            [new CommandArg('path', term.parseString, 'policy path', 'file')], term.lspolicy),
        new CommandDef('lsrole', 'list rights associated with a role',
            [new CommandArg('role', term.parseString, 'role name')], term.lsrole),
        new CommandDef('mkrole', 'create a new role',
            [new CommandArg('name', term.parseString, 'role name'),
                new CommandArg('description', term.parseString, null, 'optional'),
                new CommandArg('rights', term.parseString, 'rights list', 'optional', 'list')], term.mkrole),
        new CommandDef('edrole', 'add or remove rights from a role',
            [new CommandArg('role', term.parseString, 'role name'),
                new CommandArg('rights', term.parseString, 'rights list', 'list')], term.edrole),
        new CommandDef('share', 'assign a policy to file(s)',
            [new CommandArg('policy', term.parseString, 'policy path', 'file'),
                new CommandArg('filespec', term.parseString)], term.share),
        new CommandDef('unshare', 'remove a policy from file(s)',
            [new CommandArg('policy', term.parseString, 'policy path', 'file'),
                new CommandArg('filespec', term.parseString)], term.unshare),
        new CommandDef('pshare', 'create a path-based policy',
            [new CommandArg('policy', term.parseString, 'policy path', 'file'),
                new CommandArg('ptype', term.parseString, 'prefix|globv1|regex'),
                new CommandArg('pattern', term.parseString),
                new CommandArg('mimetype', term.parseString, null, 'optional')], term.pshare),
        new CommandDef('punshare', 'remove a path-based policy',
            [new CommandArg('id', term.parseLong)], term.punshare),
        new CommandDef('pplist', 'list my path-based policies', [], term.pplist),
        new CommandDef('chown', 'change the owner of a file',
            [new CommandArg('path', term.parseString, 'file path', 'file'),
                new CommandArg('owner', term.parseString, 'owner path', 'optional', 'file')], term.chown),
        new CommandDef('setmt', 'change the MIME type of a plain file',
            [new CommandArg('path', term.parseString, 'file path', 'file'),
                new CommandArg('mimetype', term.parseString, 'MIME type')], term.setmt),
        new CommandDef('lsaccess', 'list policies applied to a file',
            [new CommandArg('path', term.parseString, 'file path', 'file')], term.lsaccess),
        new CommandDef('mkcomp', 'create a routing component from a text file',
            [new CommandArg('source', term.parseString, 'component source file', 'file'),
                new CommandArg('output', term.parseString, 'component output file', 'optional', 'file')], term.ccomp),
        new CommandDef('lscomp', 'list component contents',
            [new CommandArg('component', term.parseString, 'component path', 'file')], term.lscomp),
        new CommandDef('mkjar', 'create a jar file',
            [new CommandArg('outpath', term.parseString, 'jar path', 'file'),
                new CommandArg('inpath', term.parseString, 'source path', 'file'),
                new CommandArg('fentry', term.parseBoolean, null, 'optional')], term.mkjar),
        new CommandDef('mklib', 'create a library',
            [new CommandArg('libpath', term.parseString, 'library path', 'file')], term.mklib),
        new CommandDef('pub', 'publish a component',
            [new CommandArg('libpath', term.parseString, 'library path', 'file'),
                new CommandArg('groupId', term.parseString),
                new CommandArg('artifactId', term.parseString),
                new CommandArg('version', term.parseString),
                new CommandArg('path', term.parseString, 'component path', 'file')], term.publish),
        new CommandDef('ccomp', 'compile a component (same as mkcomp)',
            [new CommandArg('source', term.parseString, 'component source file', 'file'),
                new CommandArg('output', term.parseString, 'component output file', 'optional', 'file')], term.ccomp),
        new CommandDef('validate', 'validate DbManager cache',
            [new CommandArg('i', term.parseLiteral, null, 'optional'),
                new CommandArg('c', term.parseLiteral, null, 'optional')], term.validate),
        new CommandDef('migrate', 'migrate Choice database to FSChoice', [], term.migrate),
        new CommandDef('adef', 'define metadata attribute',
            [new CommandArg('path', term.parseString, 'definition file path', 'file'),
                new CommandArg('type', term.parseString, 'attribute type'),
                new CommandArg('description', term.parseString, 'attribute description')], term.adef),
        new CommandDef('avalues', 'get all values of an attribute',
            [new CommandArg('path', term.parseString, 'definition file path', 'file'),
                new CommandArg('prefix', term.parseString, 'target file path prefix', 'optional')], term.avalues),
        new CommandDef('aundef', 'undefine metadata attribute',
            [new CommandArg('path', term.parseString, 'definition file path', 'file'),
                new CommandArg('force', term.parseBoolean, 'force removal', 'optional')], term.aundef),
        new CommandDef('who', 'who is on the system', [], term.who),
        new CommandDef('scriptgroup', 'set script file for a group',
            [new CommandArg('group', term.parseString, 'group path', 'file'),
                new CommandArg('script', term.parseString, 'script path', 'optional', 'file'),
                new CommandArg('reset', term.parseBoolean, 'reset user script indices?', 'optional')],
            term.scriptgroup),
        new CommandDef('liven', 'set live monitoring of a Choicelet',
            [new CommandArg('group', term.parseString, 'group path', 'file'),
                new CommandArg('folder', term.parseString, 'user data folder', 'file'),
                new CommandArg('choicelet', term.parseString, 'Choicelet name'),
                new CommandArg('version', term.parseString, 'Choicelet version', 'optional'),
                new CommandArg('livejs', term.parseString, 'live.js URL', 'optional'),
                new CommandArg('interval', term.parseLong, 'update interval', 'optional')
            ], term.liven),
        new CommandDef('unliven', 'remove live monitoring of a Choicelet',
            [new CommandArg('group', term.parseString, 'group path', 'file'),
                new CommandArg('choicelet', term.parseString, 'Choicelet name'),
                new CommandArg('version', term.parseString, 'Choicelet version', 'optional')
            ], term.unliven),
        new CommandDef('gscript', 'set server-side script for a group',
            [new CommandArg('group', term.parseString, 'group path', 'file'),
                new CommandArg('script', term.parseString, 'script path', 'file', 'optional')
            ], term.gscript),
        new CommandDef('cleanup', 'do filesystem cleanup tasks',
            [new CommandArg('what', term.parseString, 'choicedata-orphans|resource-orphans|datanode-refcounts'),
                new CommandArg('doit', term.parseBoolean, 'take cleanup action', 'optional')
            ], term.cleanup),
        new CommandDef('download', 'download a file (or a folder as .zip)',
            [new CommandArg('path', term.parseString, 'file path', 'file'),
                new CommandArg('incdir', term.parseBoolean, 'include folder name in zip paths', 'optional'),
                new CommandArg('mimetype', term.parseString, 'MIME type', 'optional')
            ], term.download),
        new CommandDef('edit', 'edit a file',
            [new CommandArg('path', term.parseString, 'file path', 'file', 'optional')], term.edit),
        new CommandDef('mkmailer', 'create a mailer',
            [new CommandArg('path', term.parseString, 'file path', 'file'),
                new CommandArg('host', term.parseString, 'SMTP relay host'),
                new CommandArg('port', term.parseLong, 'relay host port', 'optional'),
                new CommandArg('auth', term.parseBoolean, 'authenticate?'),
                new CommandArg('starttls', term.parseBoolean, 'enable STARTTLS?'),
                new CommandArg('username', term.parseString, 'relay username', 'optional'),
                new CommandArg('password', term.parseString, 'relay password', 'optional')], term.mkmailer),
        new CommandDef('mail', 'send an email',
            [new CommandArg('mailer', term.parseString, 'mailer path', 'optional'),
                new CommandArg('html', term.parseBoolean, 'HTML message?', 'optional'),
                new CommandArg('from', term.parseString, 'sender email address', 'optional')], term.mail),
        new CommandDef('cfclear', 'clear entries in front-end cache',
            [new CommandArg('uri', term.parseString, 'uri path', 'optional'),
                new CommandArg('resid', term.parseLong, 'resource id', 'optional')], term.cfclear),
        new CommandDef('cfdump', 'dump the front-end cache',
            [new CommandArg('what', term.parseString, 'resource id or uri path', 'optional')], term.cfdump),
        new CommandDef('alist', 'list metadata attributes of a file',
            [new CommandArg('path', term.parseString, 'file path', 'file')], term.alist),
        new CommandDef('aset', 'set metadata attribute on a file',
            [new CommandArg('path', term.parseString, 'file path', 'file'),
                new CommandArg('attr', term.parseString, 'attribute path', 'file'),
                new CommandArg('value', term.parseString, 'attribute value', 'optional')], term.aset),
        new CommandDef('run', 'run JavaScript file',
            [new CommandArg('path', term.parseString, 'js file path', 'file'),
                new CommandArg('asOwner', term.parseBoolean, 'run as file owner?', 'optional'),
                new CommandArg('module', term.parseBoolean, 'run as module', 'optional'),
                new CommandArg('arg1', term.parseString, 'argument 1', 'optional'),
                new CommandArg('arg2', term.parseString, 'argument 2', 'optional'),
                new CommandArg('arg3', term.parseString, 'argument 3', 'optional'),
                new CommandArg('arg4', term.parseString, 'argument 4', 'optional'),
                new CommandArg('arg5', term.parseString, 'argument 5', 'optional'),
            ], term.runjs),
        new CommandDef('pager', 'turn output pager on / off',
            [new CommandArg('enable', term.parseBoolean, 'enable pager', 'optional'),], term.pager),
    ];
}
